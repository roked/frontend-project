{"version":3,"sources":["components/home.jsx","components/login.jsx","components/about.jsx","components/register.jsx","components/property.jsx","components/newproperty.jsx","components/editproperty.jsx","components/profile.jsx","layout/navbar.jsx","layout/footer.jsx","App.js","reportWebVitals.js","index.jsx"],"names":["setMetaForHeaders","username","process","REACT_APP_USERNAME","password","REACT_APP_PASSWORD","meta","Map","set","base64","encode","getProperties","a","headers","Headers","settings","method","withCredentials","credentials","fetch","then","response","json","data","properties","message","status","res","result","allProperties","Object","keys","forEach","prop","image","img","withRouter","props","user","location","state","getUser","useState","isLoggedIn","setData","finalData","setFinalData","dataFilter","setFilter","Truncate","name","Card","Text","length","substring","features","setFeatures","garden","setGarden","balcony","setBalc","pool","setPool","barbeque","setBarb","gym","setGym","alert","setAlert","useEffect","alertMessage","feat","Alert","variant","Heading","values","fetchData","sellButton","Button","onClick","history","push","pathname","err","createNewProperty","className","Form","Check","label","onChange","e","target","checked","every","val","finData","map","property","propertyFeat","Array","isArray","index","applyFilters","CardDeck","item","Img","src","Body","Title","description","Footer","price","propertyId","visitProperty","_id","signIn","body","JSON","stringify","email","setEmail","setPassword","onSubmit","preventDefault","userData","postUser","Group","controlId","Label","Control","type","value","placeholder","required","Feedback","About","registerUser","archiveImage","timeLeft","setTimeLeft","setUsername","signUpCode","setCode","intervalId","setInterval","clearInterval","minLength","maxLength","id","muted","feedback","getProperty","allFeatures","filename","i","deleteProperty","sendMessage","msg","updateProperty","setMsg","useParams","buttons","h1Text","listFeatures","feature","ListGroupItem","getListOfFeatures","handleClick","deleteData","editProperty","handleSubmit","receiver","author","msgToSend","window","reload","sendMsg","updateStatus","archiveProperty","Accordion","defaultActiveKey","Header","Toggle","as","eventKey","Collapse","rows","ListGroup","category","createProperty","images","FormData","append","key","title","setTitle","setPrice","setCategory","setStatus","setLocation","setImages","setDescription","postData","Row","Col","md","custom","data-testid","File","defaultValue","files","multiple","updatedData","currentUser","getHistory","deleteMessage","propertiesList","msgData","setMsgData","messagesList","alertP","setAlertP","alertM","setAlertM","alertProperties","alertMessages","msgs","sender","signOut","userButtons","setUser","isInitialMount","useRef","current","goHome","Nav","Link","goProfile","singOutUser","registerPage","loginPage","children","Navbar","bg","expand","Brand","aria-controls","goAbout","fixed","App","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","console","log"],"mappings":"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","file":"static/js/main.d330636b.chunk.js","sourcesContent":["/**\n * @module Components/home\n * @description Home page functional component\n * @author Mitko Donchev\n */\nimport React, {\n  useState,\n  useEffect,\n} from 'react';\nimport { withRouter } from 'react-router';\nimport Card from 'react-bootstrap/Card';\nimport CardDeck from 'react-bootstrap/CardDeck';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport Form from 'react-bootstrap/Form';\nimport fetch from 'node-fetch';\nimport base64 from 'base-64';\n\n/**\n * The function will get the current user if one.\n *\n * @name Get user\n * @param {Object} props - the react props\n * @returns {Object} the current user info\n * @returns {Boolean} false - if no user\n */\nfunction getUser(props) {\n  let user;\n  if (props.location.state) {\n    user = props.location.state.user;\n  } else {\n    user = false;\n  }\n  return user;\n}\n\n/**\n * The function will get the mata for the headers.\n *\n * @name Get meta\n * @returns {Map} meta - a map of key values\n */\nfunction setMetaForHeaders() {\n  // get the username and password from env variables\n  const username = process.env.REACT_APP_USERNAME;\n  const password = process.env.REACT_APP_PASSWORD;\n\n  const meta = new Map();\n  // set the content type\n  meta.set('Content-Type', 'application/json');\n  // auth credentials to access the backend API\n  meta.set('Authorization', `Basic ${base64.encode(`${username}:${password}`)}`);\n  // set new header in order to add the credentials and type\n  return meta;\n}\n\n/**\n * The function will fetch all properties from the RESTApi\n *\n * @name Get the all properties\n * @returns {Object} all properties saved in the DB\n */\nasync function getProperties() {\n  // get the mata and set the headers\n  const meta = setMetaForHeaders();\n  const headers = new Headers(meta);\n  try {\n    const settings = {\n      method: 'post', withCredentials: true, credentials: 'include', headers,\n    };\n    // using node fetch to get the data from the API\n    const result = await fetch('http://192.168.1.8:3001/api/property/show', settings)\n      .then((response) => response.json().then((data) => ({\n        properties: data.properties,\n        message: data.message,\n        status: response.status,\n      })).then((res) => res));\n    if (result.status === 200) {\n      const allProperties = result.properties;\n      // loop inside the object full of properties\n      Object.keys(allProperties).forEach((prop) => {\n        // `prop` is the property name\n        // `getData[prop]` is the property value\n\n        // if image exists\n        if (allProperties[prop].image) {\n          // prepare the image for read as base64 string\n          result.properties[prop].image = (`data:image/png;base64,${allProperties[prop].image[0].img}`);\n        }\n      });\n    }\n\n    // return the response\n    return result;\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * Define the home page functional component which show all properties\n *\n * @name Home page\n * @param {Object} props\n * @returns {DOMRect} the jsx code which represents the home page\n */\nconst Home = (props) => {\n  // get the user from the props state\n  const user = getUser(props);\n  // check for user (if logged in)\n  const [isLoggedIn] = useState(!!user);\n  // store the state of the properties data\n  const [data, setData] = useState([]);\n  // store the filtered data\n  const [finalData, setFinalData] = useState([]);\n  // store the properties which will be displayed\n  const [dataFilter, setFilter] = useState([]);\n\n  // truncate the description\n  function Truncate(props) { // eslint-disable-line no-shadow\n    // the max length of a description\n    const maxLength = 100;\n    const { name } = props;\n    return (\n        <Card.Text>\n        {' '}\n        {name.length > maxLength ? `${name.substring(0, maxLength)}...` : name}\n        {' '}\n        </Card.Text>\n    );\n  }\n\n  // set features variables which state will be checked\n  const [features, setFeatures] = useState();\n  const [garden, setGarden] = useState(false);\n  const [balcony, setBalc] = useState(false);\n  const [pool, setPool] = useState(false);\n  const [barbeque, setBarb] = useState(false);\n  const [gym, setGym] = useState(false);\n  // store the alert\n  const [alert, setAlert] = useState();\n\n  // lifecycle method\n  // useEffect is called immediately after the component is mounted to the DOM\n  useEffect(() => {\n    let alertMessage;\n    // set the filters\n    const feat = {\n      garden,\n      balcony,\n      pool,\n      barbeque,\n      gym,\n    };\n    // set the features (object.value() return an array)\n    setFeatures(Object.values(feat));\n\n    async function fetchData() {\n      // send HTTP request\n      const result = await getProperties();\n      if (result.status === 200) {\n        // set the state for the persistent data\n        setData(result.properties);\n        // if the filter data is empty\n        if (dataFilter.length === 0) {\n          setFilter(result.properties);\n        }\n      } else {\n        alertMessage = (\n                    <Alert variant=\"warning\">\n                        <Alert.Heading>{result.message}</Alert.Heading>\n                    </Alert>\n        );\n        setAlert(alertMessage);\n      }\n    }\n\n    // call the function\n    fetchData();\n\n    // if filters were applied\n    if (finalData.length !== 0) {\n      // if filters do not match any property\n      if (finalData[0] === 'string') {\n        setFilter([]);\n      } else {\n        // if final data changes\n        setFilter(finalData);\n      }\n    }\n  }, [garden, balcony, pool, barbeque, gym, finalData, dataFilter.length]);\n\n  // visitProperty is called whenever a property is selected\n  const visitProperty = (propertyId) => {\n    try {\n      // redirect to property\n      props.history.push({\n        pathname: `/property/${propertyId}`,\n        state: { user },\n      });\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n\n  // create new property route\n  const createNewProperty = () => {\n    try {\n      // redirect to property\n      props.history.push({\n        pathname: '/property/new',\n        state: { user },\n      });\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n\n  // set the sell button\n  let sellButton;\n  if (isLoggedIn) {\n    sellButton = <Button onClick={() => createNewProperty()} variant=\"info\">Sell Now!</Button>;\n  }\n\n  // apply filters\n  const applyFilters = () => {\n    // if no filters were applied\n    if (features.every((val) => !val)) {\n      setFinalData([]);\n      setFilter(data);\n      return;\n    }\n    // array to store the properties after filtering\n    const finData = [];\n    data.map((property) => {\n      const propertyFeat = property.features;\n      // check which properties match the filter\n      if (Array.isArray(propertyFeat) && Array.isArray(features)\n                && propertyFeat.length === features.length\n                && propertyFeat.every((val, index) => val === features[index])) {\n        // if match\n        finData.push(property);\n      }\n      return true;\n    });\n    // in case no matches are found\n    if (finData.length === 0) {\n      // set the data to be a an array with a string\n      setFinalData(['string']);\n      return;\n    }\n    // set the data with filters\n    setFinalData(finData);\n  };\n  return (\n        <div className=\"container\">\n            {alert}\n            <div className=\"my-2\">\n                <h1 className=\"pageTitle\">Our active listings!</h1>\n                {sellButton}\n            </div>\n            <div className=\"my-2 filters\">\n                <div className=\"checkBox\">\n                    <h3>Filters</h3>\n                    <Form.Check\n                      className=\"centerCheckbox\"\n                      name=\"garden\"\n                      label=\"Beautiful garden\"\n                      onChange={(e) => setGarden(e.target.checked)}\n                    />\n                    <Form.Check\n                      className=\"centerCheckbox\"\n                      name=\"barbeque\"\n                      label=\"Barbeque\"\n                      onChange={(e) => setBalc(e.target.checked)}\n                    />\n                    <Form.Check\n                      className=\"centerCheckbox\"\n                      name=\"pool\"\n                      label=\"Pool\"\n                      onChange={(e) => setPool(e.target.checked)}\n                    />\n                    <Form.Check\n                      className=\"centerCheckbox\"\n                      name=\"balcony\"\n                      label=\"Balcony\"\n                      onChange={(e) => setBarb(e.target.checked)}\n                    />\n                    <Form.Check\n                      className=\"centerCheckbox\"\n                      name=\"gym\"\n                      label=\"Gym\"\n                      onChange={(e) => setGym(e.target.checked)}\n                    />\n                    <Button className=\"round\" onClick={() => applyFilters()} variant=\"success\">Filter</Button>\n                </div>\n            </div>\n            <CardDeck>\n                <div className=\"row\">\n                    {dataFilter.map((item, index) => (\n                        <div className=\"col-sm-4\" key={index}>\n                            <Card className=\"mb-3 homeCard\">\n                                <Card.Img variant=\"top\" src={item.image} />\n                                <Card.Body>\n                                    <Card.Title>{item.name}</Card.Title>\n                                    <Truncate name={item.description} />\n                                </Card.Body>\n                                <Card.Footer>\n                                    <big className=\"text-muted\">\n                                        Price:\n                                        {item.price}\n                                    </big>\n                                    <Button onClick={() => visitProperty(item._id)} variant=\"info\">More Info</Button>\n                                </Card.Footer>\n                            </Card>\n                        </div>\n                    ))}\n                </div>\n            </CardDeck>\n        </div>\n  );\n};\n\nexport default withRouter(Home);\n","/**\n * @module Components/login\n * @description Login page functional component\n * @author Mitko Donchev\n */\nimport React, { useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport fetch from 'node-fetch';\nimport base64 from 'base-64';\nimport { withRouter } from 'react-router';\n\n/**\n * The function will get the mata for the headers.\n *\n * @name Get meta\n * @returns {Map} meta - a map of key values\n */\nfunction setMetaForHeaders() {\n  // get the username and password from env variables\n  const username = process.env.REACT_APP_USERNAME;\n  const password = process.env.REACT_APP_PASSWORD;\n\n  const meta = new Map();\n  // set the content type\n  meta.set('Content-Type', 'application/json');\n  // auth credentials to access the backend API\n  meta.set('Authorization', `Basic ${base64.encode(`${username}:${password}`)}`);\n  // set new header in order to add the credentials and type\n  return meta;\n}\n\n/**\n * The function will allow user to sign in with valid credentials\n *\n * @name Login\n * @param {Object} user - the user info\n * @returns {Object} result - the outcome of the request\n */\nasync function signIn(user) {\n  // get the mata and set the headers\n  const meta = setMetaForHeaders();\n  const headers = new Headers(meta);\n\n  try {\n    const settings = {\n      method: 'post',\n      body: JSON.stringify(user),\n      withCredentials: true,\n      credentials: 'include',\n      headers,\n    };\n\n    // using node fetch to post the data to the API endpoint\n    // return the response\n    return await fetch('http://192.168.1.8:3001/api/user/login', settings)\n      .then((response) => response.json().then((data) => ({\n        user: data.user,\n        message: data.message,\n        status: response.status,\n      })).then((res) => res));\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * Define the login page functional component\n *\n * @name Login page\n * @param {Object} props\n * @returns {DOMRect} the jsx code which represents the login page\n */\nconst Login = (props) => {\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  // store the alert\n  let alertMessage;\n  const [alert, setAlert] = useState();\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // create user object\n    const userData = {\n      email,\n      password,\n    };\n\n    // send the user object\n    async function postUser() {\n      try {\n        // send HTTP request\n        const result = await signIn(userData);\n        // if the request was successful\n        if (result.status === 200) {\n          alertMessage = (\n                        <Alert variant=\"success\">\n                            <Alert.Heading>{result.message}</Alert.Heading>\n                        </Alert>\n          );\n          setAlert(alertMessage);\n          // redirect to home page\n          // pass the logged user\n          props.history.push({\n            pathname: '/',\n            state: { user: result.user },\n          });\n          return true;\n        }\n        alertMessage = (\n                        <Alert variant=\"danger\">\n                            <Alert.Heading>{result.message}</Alert.Heading>\n                        </Alert>\n        );\n        setAlert(alertMessage);\n        return false;\n      } catch (err) {\n        return false;\n      }\n    }\n\n    // call postData\n    postUser();\n  };\n\n  return (\n        <div className=\"container\">\n            {alert}\n            <h1 className=\"pageTitle\">Nice to meet you seller. Let&apos;s get started!</h1>\n            <Form onSubmit={handleSubmit}>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control\n                      type=\"email\"\n                      name=\"email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      placeholder=\"Enter email\"\n                      required\n                    />\n                    <Form.Text className=\"text-muted\">\n                        We&apos;ll never share your email and password with anyone else.\n                    </Form.Text>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Email empty or wrong!\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                      type=\"password\"\n                      name=\"password\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      placeholder=\"Password\"\n                      required\n                    />\n                    <Form.Text className=\"text-muted\">\n                        Never share your password with anyone else!\n                    </Form.Text>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Password empty or invalid!\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n                <Button className=\"round\" variant=\"primary\" type=\"submit\">\n                    Sign In!\n                </Button>\n            </Form>\n        </div>\n  );\n};\n\nexport default withRouter(Login);\n","/**\n * @module Components/about\n * @description About page functional component\n * @author Mitko Donchev\n */\nimport React from 'react';\n\n/**\n * Define the about page functional component\n *\n * @name About page\n * @returns {DOMRect} the jsx code which represents the home page\n */\nconst About = () => (\n  <div>\n    <div className=\"container\">\n      <p>\n        Fusce sollicitudin, libero id gravida placerat,\n        augue nibh ornare augue, in ultrices magna tellus nec odio.\n        Lorem ipsum dolor sit amet,consectetur adipiscing elit.\n      </p>\n    </div>\n  </div>\n);\n\nexport default About;\n","/**\n * @module Components/register\n * @description Registration page functional component\n * @author Mitko Donchev\n */\nimport React, { useEffect, useState } from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Alert from 'react-bootstrap/Alert';\nimport Button from 'react-bootstrap/Button';\nimport fetch from 'node-fetch';\nimport base64 from 'base-64';\nimport { withRouter } from 'react-router';\n\n/**\n * The function will get the mata for the headers.\n *\n * @name Get meta\n * @returns {Map} meta - a map of key values\n */\nfunction setMetaForHeaders() {\n  // get the username and password from env variables\n  const username = process.env.REACT_APP_USERNAME;\n  const password = process.env.REACT_APP_PASSWORD;\n\n  const meta = new Map();\n  // set the content type\n  meta.set('Content-Type', 'application/json');\n  // auth credentials to access the backend API\n  meta.set('Authorization', `Basic ${base64.encode(`${username}:${password}`)}`);\n  // set new header in order to add the credentials and type\n  return meta;\n}\n\n/**\n * The function will try to register a new user\n *\n * @name Registration\n * @param {Object} user - the user info\n * @returns {Object} result - the outcome of the request\n */\nasync function registerUser(user) {\n  // get the mata and set the headers\n  const meta = setMetaForHeaders();\n  const headers = new Headers(meta);\n  try {\n    const settings = {\n      method: 'post',\n      body: JSON.stringify(user),\n      withCredentials: true,\n      credentials: 'include',\n      headers,\n    };\n    // using node fetch to post the data to the API endpoint\n    // return the response\n    return await fetch('https://localhost:3001/register/', settings)\n      .then((response) => response.json().then((data) => ({\n        message: data.message,\n        status: response.status,\n      })).then((res) => res));\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * Define the Registration page functional component\n *\n * @name Registration page\n * @param {Object} props\n * @returns {DOMRect} the jsx code which represents the Registration page\n */\nconst Register = (props) => {\n  // initialize timeLeft\n  const [timeLeft, setTimeLeft] = useState(6);\n  // set variables which state will be checked\n  const [username, setUsername] = useState('');\n  const [email, setEmail] = useState('');\n  const [password, setPassword] = useState('');\n  const [signUpCode, setCode] = useState('');\n  // store the alert\n  let alertMessage;\n  const [alert, setAlert] = useState();\n\n  // this executes when the form is submitted\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // create user object\n    const user = {\n      username,\n      email,\n      password,\n      signUpCode,\n    };\n\n    // send the user object\n    async function postUser() {\n      try {\n        // send HTTP request\n        const result = await registerUser(user);\n        // if the request was successful\n        if (result.status === 200) {\n          alertMessage = (\n                        <Alert variant=\"success\">\n                            <Alert.Heading>{result.message}</Alert.Heading>\n                        </Alert>\n          );\n          setAlert(alertMessage);\n          // redirect to login page\n          props.history.push('/login');\n          return true;\n        }\n        alertMessage = (\n                        <Alert variant=\"danger\">\n                            <Alert.Heading>{result.message}</Alert.Heading>\n                        </Alert>\n        );\n        setAlert(alertMessage);\n        return false;\n      } catch (err) {\n        return false;\n      }\n    }\n\n    // call postData\n    postUser();\n  };\n\n  // useEffect will countdown and remove the alert\n  useEffect(() => {\n    // exit early when we reach 0\n    if (!timeLeft) {\n      // remove alert\n      setAlert();\n      // reset the timer\n      setTimeLeft(6);\n    }\n    // using setInterval to run every second\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1);\n    }, 1000);\n\n    // clear interval on re-render to avoid memory leaks\n    return () => clearInterval(intervalId);\n  }, [timeLeft]);\n\n  return (\n        <div className=\"container\">\n            {alert}\n            <h1 className=\"pageTitle\">First time here? You&apos;re have one more step!</h1>\n            <Form onSubmit={handleSubmit}>\n                <Form.Group controlId=\"formBasicUsername\">\n                    <Form.Label>Username</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      name=\"username\"\n                      value={username}\n                      onChange={(e) => setUsername(e.target.value)}\n                      placeholder=\"Enter Username\"\n                      required\n                    />\n                    <Form.Text className=\"text-muted\">\n                        Choose a cool username. You will thank us later.\n                    </Form.Text>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide a valid username.\n                    </Form.Control.Feedback>\n                </Form.Group>\n                <Form.Group controlId=\"formBasicEmail\">\n                    <Form.Label>Email address</Form.Label>\n                    <Form.Control\n                      type=\"email\"\n                      name=\"email\"\n                      value={email}\n                      onChange={(e) => setEmail(e.target.value)}\n                      placeholder=\"Enter email\"\n                      required\n                    />\n                    <Form.Text className=\"text-muted\">\n                        We&apos;ll never share your email and password with anyone else.\n                    </Form.Text>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide a valid email.\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicPassword\">\n                    <Form.Label>Password</Form.Label>\n                    <Form.Control\n                      type=\"password\"\n                      name=\"password\"\n                      value={password}\n                      onChange={(e) => setPassword(e.target.value)}\n                      placeholder=\"Password\"\n                      minLength=\"8\"\n                      maxLength=\"20\"\n                      required\n                    />\n                    <Form.Text id=\"passwordHelpBlock\" muted>\n                        Your password must be 8-20 characters long, contain letters and numbers, and\n                        must not contain spaces, special characters, or emoji.\n                    </Form.Text>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please choose a valid password.\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group controlId=\"formBasicSignUpCode\">\n                    <Form.Label>Sign-up Code</Form.Label>\n                    <Form.Control\n                      type=\"text\"\n                      name=\"signUpCode\"\n                      value={signUpCode}\n                      onChange={(e) => setCode(e.target.value)}\n                      placeholder=\"Sign-up code\"\n                      minLength=\"5\"\n                      required\n                    />\n                    <Form.Text id=\"passwordHelpBlock\" muted>\n                        Please provide your sign-up code.\n                    </Form.Text>\n                    <Form.Control.Feedback type=\"invalid\">\n                        Please provide a valid sign-up code.\n                    </Form.Control.Feedback>\n                </Form.Group>\n\n                <Form.Group>\n                    <Form.Check\n                      required\n                      label=\"Agree to terms and conditions\"\n                      feedback=\"You must agree before submitting.\"\n                    />\n                </Form.Group>\n\n                <Button className=\"round\" variant=\"primary\" type=\"submit\">\n                    Sign Up!\n                </Button>\n            </Form>\n        </div>\n  );\n};\n\nexport default withRouter(Register);\n","/**\n * @module Components/property\n * @description Property page functional component\n * @author Mitko Donchev\n */\nimport React, { useEffect, useState } from 'react';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\nimport Accordion from 'react-bootstrap/Accordion';\nimport Alert from 'react-bootstrap/Alert';\nimport Form from 'react-bootstrap/Form';\nimport { useParams } from 'react-router-dom';\nimport fetch from 'node-fetch';\nimport base64 from 'base-64';\nimport { withRouter } from 'react-router';\n\n// keep the image for archive\nlet archiveImage;\n\n/**\n * The function will get the current user if one.\n *\n * @name Get user\n * @param {Object} props - the react props\n * @returns {Object} the current user info\n * @returns {Boolean} false - if no user\n */\nfunction getUser(props) {\n  let user;\n  if (props.location.state) {\n    user = props.location.state.user;\n  } else {\n    user = false;\n  }\n  return user;\n}\n\n/**\n * The function will get the mata for the headers.\n *\n * @name Get meta\n * @returns {Map} meta - a map of key values\n */\nfunction setMetaForHeaders() {\n  // get the username and password from env variables\n  const username = process.env.REACT_APP_USERNAME;\n  const password = process.env.REACT_APP_PASSWORD;\n\n  const meta = new Map();\n  // set the content type\n  meta.set('Content-Type', 'application/json');\n  // auth credentials to access the backend API\n  meta.set('Authorization', `Basic ${base64.encode(`${username}:${password}`)}`);\n  // set new header in order to add the credentials and type\n  return meta;\n}\n\n/**\n * The function will fetch a specific property from the RESTApi\n *\n * @name Get a property\n * @param {Number} id - the id of the property\n * @returns {Object} the response\n */\nasync function getProperty(id) {\n  // get the mata and set the headers\n  const meta = setMetaForHeaders();\n  const headers = new Headers(meta);\n\n  // all available features\n  const allFeatures = ['Beautiful garden', 'Barbeque', 'Pool', 'Balcony', 'Gym'];\n  try {\n    const settings = {\n      method: 'Get', withCredentials: true, credentials: 'include', headers,\n    };\n    // using node fetch to get the data from the API\n    const result = await fetch(`https://localhost:3001/property/${id}/`, settings)\n      .then((response) => response.json().then((data) => ({\n        property: data.property,\n        message: data.message,\n        status: response.status,\n      })).then((res) => res));\n\n    if (result.status === 200) {\n      // if image exists\n      if (result.property.image) {\n        // store the image\n        archiveImage = result.property.image[0].filename;\n        // prepare the image for read as base64 string\n        result.property.image = (`data:image/png;base64,${result.property.image[0].img}`);\n      }\n      // current features\n      const features = [];\n      // check which feature is true\n      // add it to an array\n      for (let i = 0; i < allFeatures.length; i += 1) {\n        if (result.property.features[i]) {\n          features.push(allFeatures[i]);\n        }\n      }\n      // set the features\n      result.property.features = features;\n    }\n\n    // return the response\n    return result;\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * The function will delete a specific property\n *\n * @name Delete a property\n * @param {Number} id - the id of the property\n * @returns {Object} the response\n */\nasync function deleteProperty(id) {\n  // get the mata and set the headers\n  const meta = setMetaForHeaders();\n  const headers = new Headers(meta);\n  try {\n    const settings = {\n      method: 'delete', withCredentials: true, credentials: 'include', headers,\n    };\n    // using node fetch to delete the selected property\n    // return the response\n    return await fetch(`https://localhost:3001/property/delete/${id}/`, settings)\n      .then((response) => response.json().then((data) => ({\n        message: data.message,\n        status: response.status,\n      })).then((res) => res));\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * The function will send a message to a user\n *\n * @name Send a message\n * @param {Object} msg - the message\n * @returns {Object} the response\n */\nasync function sendMessage(msg) {\n  // get the mata and set the headers\n  const meta = setMetaForHeaders();\n  const headers = new Headers(meta);\n  try {\n    const settings = {\n      method: 'post', body: JSON.stringify(msg), withCredentials: true, credentials: 'include', headers,\n    };\n    // using node fetch to send a message\n    return await fetch('https://localhost:3001/message/new/', settings)\n      .then((response) => response.json().then((data) => ({\n        message: data.message,\n        status: response.status,\n      })).then((res) => res));\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * The function will archive an existing property\n *\n * @name Archive property\n * @param {Number} id - the id of the property\n * @param {Object} property - the property\n * @returns {Object} the response\n */\nasync function updateProperty(id, property) {\n  // get the mata and set the headers\n  const meta = setMetaForHeaders();\n  const headers = new Headers(meta);\n  // turn the object to json\n  const data = JSON.stringify(property);\n  try {\n    const settings = {\n      method: 'put', body: data, withCredentials: true, credentials: 'include', headers,\n    };\n    // using node fetch to post the data to the API endpoint\n    return await fetch(`https://localhost:3001/property/show/${id}/`, settings)\n      .then((response) => response.json().then((item) => ({\n        message: item.message,\n        status: response.status,\n      })).then((res) => res));\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * The function will get all features and construct a list.\n *\n * @name List of features\n * @param {Object} data - the property info\n * @returns {Object} the list of features\n */\nfunction getListOfFeatures(data) {\n  let listFeatures;\n  if (data.features) {\n    listFeatures = data.features\n      .map((feature, index) => <ListGroupItem key={index}>{feature}</ListGroupItem>);\n  }\n  return listFeatures;\n}\n\n/**\n * Define the property page functional component\n *\n * @name Property page\n * @param {Object} props\n * @returns {DOMRect} the jsx code which represents the property page\n */\nconst Property = (props) => {\n  // get the user from the props state\n  const user = getUser(props);\n  // using react hook function useState\n  // to keep the state of the data\n  const [data, setData] = useState([]);\n  // keep the state of the msg\n  const [msg, setMsg] = useState('');\n  // get the property id from the params using react hook\n  const { id } = useParams();\n  // store the alert\n  const [alert, setAlert] = useState();\n\n  // lifecycle method\n  // useEffect is called immediately after the component is mounted to the DOM\n  useEffect(() => {\n    let alertMessage;\n\n    async function fetchData() {\n      // send HTTP request\n      const result = await getProperty(id);\n      if (result.status === 200) {\n        // save response to variable\n        setData(result.property);\n      } else {\n        alertMessage = (\n                    <Alert variant=\"danger\">\n                        <Alert.Heading>{result.message}</Alert.Heading>\n                    </Alert>\n        );\n        setAlert(alertMessage);\n      }\n    }\n\n    // call the function\n    fetchData();\n  }, [id]);\n\n  // creat a list of all properties\n  const listFeatures = getListOfFeatures(data);\n\n  // handleSubmit is called whenever the delete button is clicked\n  const handleClick = (e) => {\n    let alertMessage;\n    e.preventDefault();\n\n    // delete the property using the api\n    async function deleteData() {\n      try {\n        // delete the property\n        const result = await deleteProperty(id);\n        if (result.status === 200) {\n          // redirect to home page\n          props.history.push({\n            pathname: '/',\n            state: { user },\n          });\n          return true;\n        }\n        alertMessage = (\n                        <Alert variant=\"warning\">\n                            <Alert.Heading>{result.message}</Alert.Heading>\n                        </Alert>\n        );\n        setAlert(alertMessage);\n        return false;\n      } catch (err) {\n        return false;\n      }\n    }\n\n    // call deleteData\n    deleteData();\n  };\n\n  // editProperty is called whenever edit button is clicked\n  const editProperty = (propertyId) => {\n    try {\n      // redirect to property\n      props.history.push({\n        pathname: `/property/${propertyId.id}/edit`,\n        state: { user },\n      });\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n\n  // editProperty is called whenever edit button is clicked\n  const archiveProperty = (propertyId) => {\n    let alertMessage;\n    // store the default image format\n    data.image = [archiveImage];\n    data.status = 'Unpublished';\n\n    async function updateStatus() {\n      try {\n        const result = await updateProperty(propertyId.id, data);\n        if (result.status === 200) {\n          // redirect to home\n          props.history.push({\n            pathname: '/',\n            state: { user },\n          });\n          return true;\n        }\n        alertMessage = (\n                        <Alert variant=\"warning\">\n                            <Alert.Heading>{result.message}</Alert.Heading>\n                        </Alert>\n        );\n        setAlert(alertMessage);\n        return false;\n      } catch (err) {\n        return false;\n      }\n    }\n\n    updateStatus();\n  };\n\n  // handleSubmit is called whenever user sends messages\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    let alertMessage;\n    // get the owner of the property\n    const receiver = (data.author) ? data.author.username : false;\n    // send a message\n    async function sendMsg() {\n      // create an object to store information\n      const msgToSend = {\n        receiver,\n        msg,\n      };\n      // HTTP request\n      const result = await sendMessage(msgToSend);\n      if (result.status === 200) {\n        setAlert(alertMessage);\n        window.location.reload(false);\n        alertMessage = (\n                    <Alert variant=\"success\">\n                        <Alert.Heading>{result.message}</Alert.Heading>\n                    </Alert>\n        );\n      } else {\n        alertMessage = (\n                    <Alert variant=\"warning\">\n                        <Alert.Heading>{result.message}</Alert.Heading>\n                    </Alert>\n        );\n        setAlert(alertMessage);\n      }\n    }\n\n    sendMsg();\n  };\n\n  // available buttons\n  // depends of the user (property owner or not)\n  let buttons;\n  // h1 text\n  let h1Text;\n  if (data.author && user) {\n    if (data.author.id === user._id) {\n      if (data.status === 'Unpublished') {\n        h1Text = (\n                    <h1 className=\"pageTitle\">\n                        Hey\n                        {user.username}\n                        ! How are you today?\n                    </h1>\n        );\n        buttons = (\n                    <div>\n                        <Button className=\"mx-1\" onClick={() => editProperty({ id })} variant=\"warning\">\nEdit\n                            Property\n                        </Button>\n                        <Button className=\"mx-1\" variant=\"danger\" onClick={handleClick}>Delete</Button>\n                    </div>\n        );\n      } else {\n        h1Text = (\n                    <h1 className=\"pageTitle\">\n                        Hey\n                        {user.username}\n                        ! How are you today?\n                    </h1>\n        );\n        buttons = (\n                    <div>\n                        <Button\n                          className=\"mx-1\"\n                          onClick={() => archiveProperty({ id })}\n                          variant=\"secondary\"\n                        >\nArchive\n                        </Button>\n                        <Button className=\"mx-1\" onClick={() => editProperty({ id })} variant=\"warning\">\nEdit\n                            Property\n                        </Button>\n                        <Button className=\"mx-1\" variant=\"danger\" onClick={handleClick}>Delete</Button>\n                    </div>\n        );\n      }\n    } else {\n      h1Text = <h1 className=\"pageTitle\">We hope you like it!</h1>;\n      buttons = (\n                <Accordion defaultActiveKey=\"0\">\n                    <Card>\n                        <Card.Header>\n                            <Accordion.Toggle as={Button} variant=\"info\" eventKey=\"1\">\n                                Contact Seller\n                            </Accordion.Toggle>\n                        </Card.Header>\n                        <Accordion.Collapse eventKey=\"1\">\n                            <Form onSubmit={handleSubmit}>\n                                <Form.Control\n                                  name=\"msg\"\n                                  onChange={(e) => setMsg(e.target.value)}\n                                  required\n                                  type=\"text\"\n                                  as=\"textarea\"\n                                  rows=\"3\"\n                                  placeholder=\"You have a nice...\"\n                                />\n                                <Button type=\"submit\" variant=\"success\">Send</Button>\n                            </Form>\n                        </Accordion.Collapse>\n                    </Card>\n                </Accordion>\n      );\n    }\n  } else {\n    h1Text = <h1 className=\"pageTitle\">We hope you like it!</h1>;\n    buttons = (\n            <Accordion defaultActiveKey=\"0\">\n                <Card>\n                    <Card.Header>\n                        <Accordion.Toggle as={Button} variant=\"info\" eventKey=\"1\">\n                            Contact Seller\n                        </Accordion.Toggle>\n                    </Card.Header>\n                    <Accordion.Collapse eventKey=\"1\">\n                        <Form onSubmit={handleSubmit}>\n                            <Form.Control\n                              name=\"msg\"\n                              onChange={(e) => setMsg(e.target.value)}\n                              required\n                              type=\"text\"\n                              as=\"textarea\"\n                              rows=\"3\"\n                              placeholder=\"You have a nice...\"\n                            />\n                            <Button type=\"submit\" variant=\"success\">Send</Button>\n                        </Form>\n                    </Accordion.Collapse>\n                </Card>\n            </Accordion>\n    );\n  }\n\n  return (\n        <div className=\"container\">\n            {alert}\n            {h1Text}\n            <Card className=\"singleCard\">\n                <Card.Img variant=\"top\" src={data.image} />\n                <Card.Body>\n                    <Card.Title id=\"cardTitle\">{data.name}</Card.Title>\n                </Card.Body>\n                <ListGroup className=\"list-group-flush\">\n                    <ListGroupItem>\n                        Status:\n                        {data.status}\n                    </ListGroupItem>\n                    <ListGroupItem>\n                        Category:\n                        {data.category}\n                    </ListGroupItem>\n                    <ListGroupItem>\n                        Description:\n                        {data.description}\n                    </ListGroupItem>\n                    <ListGroupItem>\n                        Features:\n                        <ListGroup className=\"list-group-flush\">\n                            {listFeatures}\n                        </ListGroup>\n                    </ListGroupItem>\n                    <ListGroupItem>\n                        Location:\n                        {data.location}\n                    </ListGroupItem>\n                </ListGroup>\n                <Card.Footer>\n                    <big className=\"text-muted\">\n                        Price:\n                        {data.price}\n                    </big>\n                    {buttons}\n                </Card.Footer>\n            </Card>\n        </div>\n  );\n};\n\nexport default withRouter(Property);\n","/**\n * @module Components/new-property\n * @description New property page functional component\n * @author Mitko Donchev\n */\nimport React, {\n  useState,\n  useEffect,\n} from 'react';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport Col from 'react-bootstrap/Col';\nimport fetch from 'node-fetch';\nimport base64 from 'base-64';\nimport { withRouter } from 'react-router';\n\n/**\n * The function will get the current user if one.\n *\n * @name Get user\n * @param {Object} props - the react props\n * @returns {Object} the current user info\n * @returns {Boolean} false - if no user\n */\nfunction getUser(props) {\n  let user;\n  if (props.location.state) {\n    user = props.location.state.user;\n  } else {\n    user = false;\n  }\n  return user;\n}\n\n/**\n * The function will send the new property to the RESTApi\n *\n * @name Create new property\n * @param {Buffer} images - the image of the property\n * @param {Buffer} property - the property info\n * @returns {Object} the response data\n */\nasync function createProperty(images, property) {\n  // get the username and password from env variables\n  const username = process.env.REACT_APP_USERNAME;\n  const password = process.env.REACT_APP_PASSWORD;\n  // create new form data which will be sent to the backend\n  const data = new FormData();\n  if (images) {\n    for (let i = 0; i < images.length; i += 1) {\n      data.append('file', images[i]);\n    }\n  }\n  // place each value from the property object as part of the formData\n  Object.keys(property).forEach((key) => data.append(key, property[key]));\n  // set new header in order to add the credentials\n  const headers = new Headers();\n  // auth credentials to access the backend API\n  headers.set('Authorization', `Basic ${base64.encode(`${username}:${password}`)}`, 'Accept', 'application/json');\n  try {\n    const settings = {\n      method: 'post', body: data, withCredentials: true, credentials: 'include', headers,\n    };\n    // using node fetch to post the data to the API endpoint\n    return await fetch('https://localhost:3001/property/new/', settings)\n      .then((response) => response.json().then((item) => ({\n        message: item.message,\n        status: response.status,\n      })).then((res) => res));\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * Define the new property page functional component\n *\n * @name New property page\n * @param {Object} props\n * @returns {DOMRect} the jsx code which represents the new property page\n */\nconst NewProperty = (props) => {\n  // get the user from the props state\n  const user = getUser(props);\n  // set variables which state will be checked\n  const [title, setTitle] = useState('');\n  const [price, setPrice] = useState('');\n  const [category, setCategory] = useState('');\n  const [status, setStatus] = useState('');\n  const [location, setLocation] = useState('');\n  const [images, setImages] = useState();\n  const [features, setFeatures] = useState();\n  const [description, setDescription] = useState('');\n\n  // set features variables which state will be checked\n  const [garden, setGarden] = useState();\n  const [balcony, setBalc] = useState();\n  const [pool, setPool] = useState();\n  const [barbeque, setBarb] = useState();\n  const [gym, setGym] = useState();\n  // store the alert\n  const [alert, setAlert] = useState();\n\n  // handleSubmit is called whenever the form is submitted\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // store the property info in a object\n    const data = {\n      name: title,\n      price,\n      category,\n      location,\n      status,\n      features,\n      description,\n    };\n\n    // send the property to the backend\n    async function postData() {\n      let alertMessage;\n      try {\n        // send HTTP request\n        const result = await createProperty(images, data);\n        if (result.status === 200) {\n          // redirect to home page\n          props.history.push({\n            pathname: '/',\n            state: { user },\n          });\n          return true;\n        }\n        alertMessage = (\n                        <Alert variant=\"warning\">\n                            <Alert.Heading>{result.message}</Alert.Heading>\n                        </Alert>\n        );\n        setAlert(alertMessage);\n        return false;\n      } catch (err) {\n        return false;\n      }\n    }\n\n    // call postData\n    postData();\n  };\n\n  // lifecycle method\n  // useEffect is called immediately after the component is mounted to the DOM\n  // it will be called each time one of the features state changes\n  useEffect(() => {\n    // store all features in an object\n    const feat = {\n      garden,\n      balcony,\n      pool,\n      barbeque,\n      gym,\n    };\n    // set the features (object.value() return an array)\n    setFeatures(Object.values(feat));\n  }, [garden, balcony, pool, barbeque, gym]);\n\n  return (\n        <div className=\"container\">\n            {alert}\n            <h1 className=\"pageTitle\">Let&apos;s gather some information. Please complete the form!</h1>\n            <Form onSubmit={handleSubmit}>\n                <Form.Row>\n                    <Form.Group as={Col} md=\"3\" controlId=\"validationTitle\">\n                        <Form.Label>Title</Form.Label>\n                        <Form.Control\n                          name=\"title\"\n                          value={title}\n                          onChange={(e) => setTitle(e.target.value)}\n                          required\n                          type=\"text\"\n                          placeholder=\"My Property\"\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please provide a valid title.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"3\" controlId=\"validationPrice\">\n                        <Form.Label>Price</Form.Label>\n                        <Form.Control\n                          name=\"price\"\n                          value={price}\n                          onChange={(e) => setPrice(e.target.value)}\n                          required\n                          type=\"text\"\n                          placeholder=\"£30000\"\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please provide a valid price.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"3\" controlId=\"exampleForm.SelectCategory\">\n                        <Form.Label>Category</Form.Label>\n                        <Form.Control\n                          name=\"category\"\n                          as=\"select\"\n                          value={category}\n                          onChange={(e) => setCategory(e.target.value)}\n                          custom\n                          required\n                          data-testid=\"select-one\"\n                        >\n                            <option>--Please Select--</option>\n                            <option>Commercial</option>\n                            <option>Terrace</option>\n                            <option>Apartment</option>\n                            <option>House</option>\n                            <option>Castle</option>\n                        </Form.Control>\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group as={Col} md=\"3\" controlId=\"validationLocation\">\n                        <Form.Label>Location</Form.Label>\n                        <Form.Control\n                          name=\"location\"\n                          value={location}\n                          onChange={(e) => setLocation(e.target.value)}\n                          type=\"text\"\n                          placeholder=\"Postcode\"\n                          required\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please provide a valid postcode.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"3\" controlId=\"exampleForm.SelectStatus\">\n                        <Form.Label>Status</Form.Label>\n                        <Form.Control\n                          name=\"status\"\n                          as=\"select\"\n                          value={status}\n                          onChange={(e) => setStatus(e.target.value)}\n                          custom\n                          required\n                          data-testid=\"select-multiple\"\n                        >\n                            <option>--Please Select--</option>\n                            <option>New</option>\n                            <option>High Priority</option>\n                            <option>Unpublished</option>\n                        </Form.Control>\n                        <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n                    </Form.Group>\n                    <Form.Group as={Col} md=\"3\" controlId=\"validationFile\">\n                        <Form.Label>Attach Images</Form.Label>\n                        <Form.File\n                          data-testid=\"files-input\"\n                          name=\"images\"\n                          defaultValue={images}\n                          onChange={(e) => setImages(e.target.files)}\n                          multiple\n                        />\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group as={Col} md=\"9\" controlId=\"validationCheck\">\n                        <Form.Label>Features</Form.Label>\n                        <div className=\"checkBox\">\n                            <Form.Check\n                              name=\"garden\"\n                              label=\"Beautiful garden\"\n                              value={garden}\n                              onChange={(e) => setGarden(e.target.checked)}\n                            />\n                            <Form.Check\n                              name=\"barbeque\"\n                              label=\"Barbeque\"\n                              value={barbeque}\n                              onChange={(e) => setBalc(e.target.checked)}\n                            />\n                            <Form.Check\n                              name=\"pool\"\n                              label=\"Pool\"\n                              value={pool}\n                              onChange={(e) => setPool(e.target.checked)}\n                            />\n                            <Form.Check\n                              name=\"balcony\"\n                              label=\"Balcony\"\n                              value={balcony}\n                              onChange={(e) => setBarb(e.target.checked)}\n                            />\n                            <Form.Check name=\"gym\" label=\"Gym\" value={gym} onChange={(e) => setGym(e.target.checked)} />\n                        </div>\n                    </Form.Group>\n                </Form.Row>\n                <Form.Row>\n                    <Form.Group as={Col} md=\"9\" controlId=\"validationDescription\">\n                        <Form.Label>Description</Form.Label>\n                        <Form.Control\n                          as=\"textarea\"\n                          name=\"description\"\n                          value={description}\n                          onChange={(e) => setDescription(e.target.value)}\n                          type=\"textarea\"\n                          placeholder=\"This property has...\"\n                          required\n                        />\n                        <Form.Control.Feedback type=\"invalid\">\n                            Please provide a valid description.\n                        </Form.Control.Feedback>\n                    </Form.Group>\n                </Form.Row>\n                <Button className=\"round\" type=\"submit\" variant=\"success\">Publish property!</Button>\n            </Form>\n        </div>\n  );\n};\n\nexport default withRouter(NewProperty);\n","/**\n * @module Components/edit-property\n * @description Edit property page functional component\n * @author Mitko Donchev\n */\nimport React, {\n  useState,\n  useEffect,\n} from 'react';\nimport { useParams } from 'react-router-dom';\nimport { withRouter } from 'react-router';\nimport Form from 'react-bootstrap/Form';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport Col from 'react-bootstrap/Col';\nimport fetch from 'node-fetch';\nimport base64 from 'base-64';\n\n/**\n * The function will get the current user if one.\n *\n * @name Get user\n * @param {Object} props - the react props\n * @returns {Object} the current user info\n * @returns {Boolean} false - if no user\n */\nfunction getUser(props) {\n  let user;\n  if (props.location.state) {\n    user = props.location.state.user;\n  } else {\n    user = false;\n  }\n  return user;\n}\n\n/**\n * The function will get the mata for the headers.\n *\n * @name Get meta\n * @returns {Map} meta - a map of key values\n */\nfunction setMetaForHeaders() {\n  // get the username and password from env variables\n  const username = process.env.REACT_APP_USERNAME;\n  const password = process.env.REACT_APP_PASSWORD;\n\n  const meta = new Map();\n  // set the content type\n  meta.set('Content-Type', 'application/json');\n  // auth credentials to access the backend API\n  meta.set('Authorization', `Basic ${base64.encode(`${username}:${password}`)}`);\n  // set new header in order to add the credentials and type\n  return meta;\n}\n\n/**\n * The function will fetch a specific property from the RESTApi\n *\n * @name Get a property\n * @param {Number} id - the id of the property\n * @returns {Object} the property saved under the provided ID\n */\nasync function getProperty(id) {\n  // get the mata and set the headers\n  const meta = setMetaForHeaders();\n  const headers = new Headers(meta);\n\n  // all available features\n  const allFeatures = ['Beautiful garden', 'Barbeque', 'Pool', 'Balcony', 'Gym'];\n  try {\n    const settings = {\n      method: 'Get', withCredentials: true, credentials: 'include', headers,\n    };\n    // using node fetch to get the data from the API\n    const result = await fetch(`https://localhost:3001/property/show/${id}/edit/`, settings)\n      .then((response) => response.json().then((data) => ({\n        property: data.property,\n        message: data.message,\n        status: response.status,\n      })).then((res) => res));\n\n    if (result.status === 200) {\n      const features = [];\n      // check which feature is true\n      // add it to an array\n      for (let i = 0; i < allFeatures.length; i += 1) {\n        if (result.property.features[i]) {\n          features.push(allFeatures[i]);\n        }\n      }\n      // set the features\n      result.property.features = features;\n    }\n\n    // return the response\n    return result;\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * The function will update an existing property\n *\n * @name Update property\n * @param {Number} id - the id of the property\n * @param {Buffer} images - the image of the property\n * @param {Object} property - the property info\n */\nasync function updateProperty(id, images, property) {\n  // get the mata and set the headers\n  const meta = setMetaForHeaders();\n  const headers = new Headers(meta);\n  let data;\n  // if the image is a string (no new image selected)\n  if (typeof (images) !== 'string') {\n    // create new form data which will be sent to the backend\n    data = new FormData();\n    if (images) {\n      for (let i = 0; i < images.length; i += 1) {\n        data.append('file', images[i]);\n      }\n    }\n    // place each value from the property object as part of the formData\n    Object.keys(property).forEach((key) => data.append(key, property[key]));\n  } else {\n    // set the image value\n    property.image = images;\n    // turn the object to json\n    data = JSON.stringify(property);\n  }\n  try {\n    const settings = {\n      method: 'put', body: data, withCredentials: true, credentials: 'include', headers,\n    };\n    // using node fetch to post the data to the API endpoint\n    return await fetch(`https://localhost:3001/property/show/${id}/`, settings)\n      .then((response) => response.json().then((item) => ({\n        message: item.message,\n        status: response.status,\n      })).then((res) => res));\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * Define the edit property functional component\n *\n * @name Edit property page\n * @param {Object} props\n * @returns {DOMRect} the jsx code which represents the edit property page\n */\nconst EditProperty = (props) => {\n  // get the user from the props state\n  const user = getUser(props);\n  // using react hook function useState to control the state\n  const [data, setData] = useState([]);\n  // get the property id from the params using react hook\n  const { id } = useParams();\n\n  // set variables which state will be checked\n  const [title, setTitle] = useState('');\n  const [price, setPrice] = useState('');\n  const [category, setCategory] = useState('');\n  const [status, setStatus] = useState('');\n  const [location, setLocation] = useState('');\n  const [images, setImages] = useState();\n  const [features, setFeatures] = useState();\n  const [description, setDescription] = useState('');\n\n  // set features variables which state will be checked\n  const [garden, setGarden] = useState(false);\n  const [balcony, setBalc] = useState(false);\n  const [pool, setPool] = useState(false);\n  const [barbeque, setBarb] = useState(false);\n  const [gym, setGym] = useState(false);\n  // store the alert\n  const [alert, setAlert] = useState();\n\n  // useEffect is called immediately after the component is mounted to the DOM\n  useEffect(() => {\n    let alertMessage;\n\n    async function fetchData() {\n      // send HTTP request\n      const result = await getProperty(id);\n      if (result.status === 200) {\n        // save response to variable\n        setData(result.property);\n      } else {\n        alertMessage = (\n          <Alert variant=\"warning\">\n            <Alert.Heading>{result.message}</Alert.Heading>\n          </Alert>\n        );\n        setAlert(alertMessage);\n      }\n    }\n\n    // store all features in an object\n    const feat = {\n      garden,\n      balcony,\n      pool,\n      barbeque,\n      gym,\n    };\n    // set the features (object.value() return an array)\n    setFeatures(Object.values(feat));\n\n    // call the function\n    fetchData();\n\n    // if no new image\n    if (data.image && (!images || images.length === 0)) {\n      setImages(data.image[0]);\n    }\n  }, [id, garden, balcony, pool, barbeque, gym, images]);\n\n  // handleSubmit is called whenever the delete button is clicked\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    // store the property info in a object\n    const updatedData = {\n      name: title,\n      price,\n      category,\n      location,\n      status,\n      features,\n      description,\n    };\n\n    // if no new image\n    //     if (!images || images.length === 0) {\n    //       images = data.image[0];\n    //     }\n\n    Object.keys(updatedData).forEach((key) => {\n      if (key === 'features') {\n        updatedData[key] = features;\n      } else if (updatedData[key] === '') {\n        // if the input field is not changed\n        updatedData[key] = data[key]; // attach the old data\n      }\n    });\n\n    // send the property to the backend\n    async function postData() {\n      let alertMessage;\n      try {\n        // send HTTP request\n        const result = await updateProperty(id, images, updatedData);\n        if (result.status === 200) {\n          // redirect to home page\n          props.history.push({\n            pathname: '/',\n            state: { user },\n          });\n        } else {\n          alertMessage = (\n            <Alert variant=\"warning\">\n              <Alert.Heading>{result.message}</Alert.Heading>\n            </Alert>\n          );\n          setAlert(alertMessage);\n        }\n      } catch (err) {\n        return false;\n      }\n      return false;\n    }\n    // call postData\n    postData();\n  };\n\n  return (\n    <div className=\"container\">\n      {alert}\n      <h1 className=\"pageTitle\">Something new? Just click &apos;Update&apos; when you are ready!</h1>\n      <Form onSubmit={handleSubmit}>\n        <Form.Row>\n          <Form.Group as={Col} md=\"3\" controlId=\"validationTitle\">\n            <Form.Label>Title</Form.Label>\n            <Form.Control\n              name=\"title\"\n              defaultValue={data.name}\n              onChange={(e) => setTitle(e.target.value)}\n              required\n              type=\"text\"\n              placeholder=\"My Property\"\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              Please provide a valid title.\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group as={Col} md=\"3\" controlId=\"validationPrice\">\n            <Form.Label>Price</Form.Label>\n            <Form.Control\n              name=\"price\"\n              defaultValue={data.price}\n              onChange={(e) => setPrice(e.target.value)}\n              required\n              type=\"text\"\n              placeholder=\"£30000\"\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              Please provide a valid price.\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group as={Col} md=\"3\" controlId=\"exampleForm.SelectCategory\">\n            <Form.Label>Category</Form.Label>\n            <Form.Control\n              name=\"category\"\n              as=\"select\"\n              defaultValue={data.category}\n              onChange={(e) => setCategory(e.target.value)}\n              custom\n              required\n              data-testid=\"select-one\"\n            >\n              <option>--Please Select--</option>\n              <option>Commercial</option>\n              <option>Terrace</option>\n              <option>Apartment</option>\n              <option>House</option>\n              <option>Castle</option>\n            </Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} md=\"3\" controlId=\"validationLocation\">\n            <Form.Label>Location</Form.Label>\n            <Form.Control\n              name=\"location\"\n              defaultValue={data.location}\n              onChange={(e) => setLocation(e.target.value)}\n              type=\"text\"\n              placeholder=\"Postcode\"\n              required\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              Please provide a valid postcode.\n            </Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group as={Col} md=\"3\" controlId=\"exampleForm.SelectStatus\">\n            <Form.Label>Status</Form.Label>\n            <Form.Control\n              name=\"status\"\n              as=\"select\"\n              defaultValue={data.status}\n              onChange={(e) => setStatus(e.target.value)}\n              custom\n              required\n              data-testid=\"select-multiple\"\n            >\n              <option>--Please Select--</option>\n              <option>New</option>\n              <option>High Priority</option>\n              <option>Unpublished</option>\n            </Form.Control>\n            <Form.Control.Feedback>Looks good!</Form.Control.Feedback>\n          </Form.Group>\n          <Form.Group as={Col} md=\"3\" controlId=\"validationFile\">\n            <Form.Label>Attach Images</Form.Label>\n            <Form.File\n              data-testid=\"files-input\"\n              name=\"images\"\n              defaultValue={images}\n              onChange={(e) => setImages(e.target.files)}\n              multiple\n            />\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} md=\"9\" controlId=\"validationCheck\">\n            <Form.Label>Features</Form.Label>\n            <div className=\"checkBox\">\n              <Form.Check\n                name=\"garden\"\n                label=\"Beautiful garden\"\n                onChange={(e) => setGarden(e.target.checked)}\n              />\n              <Form.Check name=\"barbeque\" label=\"Barbeque\" onChange={(e) => setBalc(e.target.checked)} />\n              <Form.Check name=\"pool\" label=\"Pool\" onChange={(e) => setPool(e.target.checked)} />\n              <Form.Check name=\"balcony\" label=\"Balcony\" onChange={(e) => setBarb(e.target.checked)} />\n              <Form.Check name=\"gym\" label=\"Gym\" onChange={(e) => setGym(e.target.checked)} />\n            </div>\n          </Form.Group>\n        </Form.Row>\n        <Form.Row>\n          <Form.Group as={Col} md=\"9\" controlId=\"validationDescription\">\n            <Form.Label>Description</Form.Label>\n            <Form.Control\n              as=\"textarea\"\n              name=\"description\"\n              defaultValue={data.description}\n              onChange={(e) => setDescription(e.target.value)}\n              type=\"textarea\"\n              placeholder=\"This property has...\"\n              required\n            />\n            <Form.Control.Feedback type=\"invalid\">\n              Please provide a valid description.\n            </Form.Control.Feedback>\n          </Form.Group>\n        </Form.Row>\n        <Button className=\"round\" type=\"submit\" variant=\"success\">Update!</Button>\n      </Form>\n    </div>\n  );\n};\n\nexport default withRouter(EditProperty);\n","/**\n * @module Components/profile\n * @description Profile page functional component\n * @author Mitko Donchev\n */\nimport React, { useEffect, useState } from 'react';\nimport { withRouter } from 'react-router';\nimport Card from 'react-bootstrap/Card';\nimport Button from 'react-bootstrap/Button';\nimport Alert from 'react-bootstrap/Alert';\nimport ListGroup from 'react-bootstrap/ListGroup';\nimport Form from 'react-bootstrap/Form';\nimport ListGroupItem from 'react-bootstrap/ListGroupItem';\nimport fetch from 'node-fetch';\nimport base64 from 'base-64';\n\n/**\n * The function will get the current user if one.\n *\n * @name Get user\n * @param {Object} props - the react props\n * @returns {Object} the current user info\n * @returns {Boolean} false - if no user\n */\nfunction getUser(props) {\n  let user;\n  if (props.location.state) {\n    user = props.location.state.user;\n  } else {\n    user = false;\n  }\n  return user;\n}\n\n/**\n * The function will get the mata for the headers.\n *\n * @name Get meta\n * @returns {Map} meta - a map of key values\n */\nfunction setMetaForHeaders() {\n  // get the username and password from env variables\n  const username = process.env.REACT_APP_USERNAME;\n  const password = process.env.REACT_APP_PASSWORD;\n\n  const meta = new Map();\n  // set the content type\n  meta.set('Content-Type', 'application/json');\n  // auth credentials to access the backend API\n  meta.set('Authorization', `Basic ${base64.encode(`${username}:${password}`)}`);\n  // set new header in order to add the credentials and type\n  return meta;\n}\n\n/**\n * The function will fetch all properties from the RESTApi\n *\n * @name Get the all properties\n * @params {Object} currentUser - the current user info\n * @returns {Object} the response data\n */\nasync function getProperties(currentUser) {\n  // get the mata and set the headers\n  const meta = setMetaForHeaders();\n  const headers = new Headers(meta);\n\n  try {\n    const settings = {\n      method: 'post',\n      body: JSON.stringify(currentUser),\n      withCredentials: true,\n      credentials: 'include',\n      headers,\n    };\n    // using node fetch to get the data from the API\n    const result = await fetch('https://localhost:3001/property/show', settings)\n      .then((response) => response.json().then((data) => ({\n        properties: data.properties,\n        message: data.message,\n        status: response.status,\n      })).then((res) => res));\n    if (result.status === 200) {\n      const allProperties = result.properties;\n      // loop inside the object full of properties\n      Object.keys(allProperties).forEach((prop) => {\n        // `prop` is the property name\n        // `getData[prop]` is the property value\n\n        // if image exists\n        if (allProperties[prop].image) {\n          // prepare the image for read as base64 string\n          result.properties[prop].image = (`data:image/png;base64,${allProperties[prop].image[0].img}`);\n        }\n      });\n    }\n    // return the response\n    return result;\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * The function will fetch message history from the RESTApi\n *\n * @name Get the message history\n * @returns {Object} the response data\n */\nasync function getHistory() {\n  // get the mata and set the headers\n  const meta = setMetaForHeaders();\n  const headers = new Headers(meta);\n  try {\n    const settings = {\n      method: 'get', withCredentials: true, credentials: 'include', headers,\n    };\n    // using node fetch to get the data from the API\n    // return the response\n    return await fetch('https://localhost:3001/message/get/', settings)\n      .then((response) => response.json().then((data) => ({\n        history: data.history,\n        message: data.message,\n        status: response.status,\n      })).then((res) => res));\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * The function will delete a message\n *\n * @name Delete a message\n * @param {Number} id - the id of the message\n * @returns {Object} the response data\n */\nasync function deleteMessage(id) {\n  // get the mata and set the headers\n  const meta = setMetaForHeaders();\n  const headers = new Headers(meta);\n  try {\n    const settings = {\n      method: 'delete', withCredentials: true, credentials: 'include', headers,\n    };\n    // using node fetch to delete the selected message\n    // return the response\n    return await fetch(`https://localhost:3001/message/${id}/`, settings)\n      .then((response) => response.json().then((data) => ({\n        message: data.message,\n        status: response.status,\n      })).then((res) => res));\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * Define the profile page functional component\n *\n * @name Profile page\n * @param {Object} props\n * @returns {DOMRect} the jsx code which represents the profile page\n */\nconst Profile = (props) => {\n  // get the user from the props state\n  const user = getUser(props);\n  // store the state of the properties data\n  const [data, setData] = useState([]);\n  // store the filtered data\n  const [finalData, setFinalData] = useState([]);\n  // store the properties which will be displayed\n  const [dataFilter, setFilter] = useState([]);\n  // store the state of the message history data\n  const [msgData, setMsgData] = useState([]);\n  let propertiesList; // variable to store the properties\n  const messagesList = []; // array to store a list of massages\n\n  // set features variables which state will be checked\n  const [features, setFeatures] = useState();\n  const [garden, setGarden] = useState(false);\n  const [balcony, setBalc] = useState(false);\n  const [pool, setPool] = useState(false);\n  const [barbeque, setBarb] = useState(false);\n  const [gym, setGym] = useState(false);\n  // store the alert\n  const [alertP, setAlertP] = useState();\n  const [alertM, setAlertM] = useState();\n\n  // truncate the description\n  function Truncate(props) { // eslint-disable-line no-shadow\n    // the max length of a description\n    const maxLength = 100;\n    const { name } = props;\n    return (\n        <Card.Text>\n        {' '}\n        {name.length > maxLength ? `${name.substring(0, maxLength)}...` : name}\n        {' '}\n        </Card.Text>\n    );\n  }\n\n  // lifecycle method\n  // useEffect is called immediately after the component is mounted to the DOM\n  useEffect(() => {\n    let alertProperties;\n    let alertMessages;\n\n    // set the filters\n    const feat = {\n      garden,\n      balcony,\n      pool,\n      barbeque,\n      gym,\n    };\n    // set the features (object.value() return an array)\n    setFeatures(Object.values(feat));\n\n    async function fetchData() {\n      // set the user\n      const currentUser = {\n        user,\n      };\n      // send HTTP request\n      // get properties\n      const result = await getProperties(currentUser);\n      // get messages\n      const history = await getHistory();\n\n      if (result.status === 200) {\n        // save responses to variable\n        setData(result.properties);\n        // if the filter data is empty\n        if (dataFilter.length === 0) {\n          setFilter(result.properties);\n        }\n      } else {\n        alertProperties = (\n                    <Alert variant=\"danger\">\n                        <Alert.Heading>{result.message}</Alert.Heading>\n                    </Alert>\n        );\n        setAlertP(alertProperties);\n      }\n\n      if (history.status === 200) {\n        // save responses to variable\n        setMsgData(history.history);\n      } else {\n        alertMessages = (\n                    <Alert variant=\"danger\">\n                        <Alert.Heading>{history.message}</Alert.Heading>\n                    </Alert>\n        );\n        setAlertM(alertMessages);\n      }\n    }\n\n    // call the function\n    fetchData();\n\n    // if filters were applied\n    if (finalData.length !== 0) {\n      // if filters do not match any property\n      if (finalData[0] === 'string') {\n        setFilter([]);\n      } else {\n        // if final data changes\n        setFilter(finalData);\n      }\n    }\n  }, [user, garden, balcony, pool, barbeque, gym, finalData, dataFilter.length]);\n\n  // visitProperty is called whenever a property is selected\n  const visitProperty = (propertyId) => {\n    try {\n      // redirect to property\n      props.history.push({\n        pathname: `/property/${propertyId}`,\n        state: { user },\n      });\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n\n  // get each property from the data\n  // and create a list\n  if (data) {\n    propertiesList = dataFilter.map((item) => (\n            <ListGroupItem>\n                <Card id=\"cardTitle\">\n                    <Card.Img variant=\"left\" src={item.image} />\n                    <Card.Body>\n                        <Card.Title>{item.name}</Card.Title>\n                        <Truncate name={item.description} />\n                    </Card.Body>\n                    <Card.Footer>\n                        <p className=\"text-muted\">\n                            Price:\n                            {item.price}\n                        </p>\n                        <Button onClick={() => visitProperty(item._id)} variant=\"info\">More Info</Button>\n                    </Card.Footer>\n                </Card>\n            </ListGroupItem>\n    ));\n  }\n\n  // handleSubmit is called whenever the delete button is clicked\n  const handleClick = (id) => {\n    let alertMessages;\n\n    // delete a message\n    async function deleteData() {\n      try {\n        // delete the message\n        const result = await deleteMessage(id);\n        if (result.status === 200) {\n          alertMessages = (\n                        <Alert variant=\"success\">\n                            <Alert.Heading>{result.message}</Alert.Heading>\n                        </Alert>\n          );\n          setAlertM(alertMessages);\n          window.location.reload(false);\n          return true;\n        }\n        alertMessages = (\n                        <Alert variant=\"danger\">\n                            <Alert.Heading>{result.message}</Alert.Heading>\n                        </Alert>\n        );\n        setAlertM(alertMessages);\n        return false;\n      } catch (err) {\n        return false;\n      }\n    }\n\n    // call deleteData\n    deleteData();\n  };\n\n  // get each message from the data\n  // create a list group element\n  // and store it in an array\n  if (msgData.length !== 0) {\n    msgData.forEach((item) => {\n      messagesList.push(item.msgs.map((value) => (\n                <ListGroupItem>\n                    <Card id=\"cardTitle\">\n                        <Card.Body>\n                            <Card.Title>\n                                Message:\n                                {value}\n                            </Card.Title>\n                            <p>\n                                Sender:\n                                {item.sender}\n                            </p>\n                        </Card.Body>\n                        <Button variant=\"danger\" onClick={() => handleClick(item._id)}>Delete</Button>\n                    </Card>\n                </ListGroupItem>\n      )));\n    });\n  }\n\n  // apply filters\n  const applyFilters = () => {\n    // if no filters were applied\n    if (features.every((val) => !val)) {\n      setFinalData([]);\n      setFilter(data);\n      return;\n    }\n    // array to store the properties after filtering\n    const finData = [];\n    data.map((property) => {\n      const propertyFeat = property.features;\n      // check which properties match the filter\n      if (Array.isArray(propertyFeat) && Array.isArray(features)\n                && propertyFeat.length === features.length\n                && propertyFeat.every((val, index) => val === features[index])) {\n        // if match\n        finData.push(property);\n      }\n      return true;\n    });\n    // in case no matches are found\n    if (finData.length === 0) {\n      // set the data to be a an array with a string\n      setFinalData(['string']);\n      return;\n    }\n    // set the data with filters\n    setFinalData(finData);\n  };\n\n  return (\n        <div className=\"container\">\n            {alertP}\n            <h1 className=\"pageTitle\">\n                Hey\n                {user.username}\n                ! Hope you are doing great!\n            </h1>\n            <div className=\"userInfo row\">\n                <div className=\"col-6 verticalLine\">\n                    <ListGroup className=\"list-group-flush\">\n                        <h1>Your currently active listing</h1>\n                        <div className=\"my-2\">\n                            <div className=\"checkBox\">\n                                <Form.Check\n                                  className=\"centerCheckbox\"\n                                  name=\"garden\"\n                                  label=\"Beautiful garden\"\n                                  onChange={(e) => setGarden(e.target.checked)}\n                                />\n                                <Form.Check\n                                  className=\"centerCheckbox\"\n                                  name=\"barbeque\"\n                                  label=\"Barbeque\"\n                                  onChange={(e) => setBalc(e.target.checked)}\n                                />\n                                <Form.Check\n                                  className=\"centerCheckbox\"\n                                  name=\"pool\"\n                                  label=\"Pool\"\n                                  onChange={(e) => setPool(e.target.checked)}\n                                />\n                                <Form.Check\n                                  className=\"centerCheckbox\"\n                                  name=\"balcony\"\n                                  label=\"Balcony\"\n                                  onChange={(e) => setBarb(e.target.checked)}\n                                />\n                                <Form.Check\n                                  className=\"centerCheckbox\"\n                                  name=\"gym\"\n                                  label=\"Gym\"\n                                  onChange={(e) => setGym(e.target.checked)}\n                                />\n                                <Button\n                                  className=\"round\"\n                                  onClick={() => applyFilters()}\n                                  variant=\"success\"\n                                >\n                                    Filter\n                                </Button>\n                            </div>\n                        </div>\n                        {propertiesList}\n                    </ListGroup>\n                </div>\n                <div className=\"col-6\">\n                    <ListGroup className=\"list-group-flush\">\n                        <h1>Your messages</h1>\n                        {alertM}\n                        {messagesList}\n                    </ListGroup>\n                </div>\n            </div>\n        </div>\n  );\n};\n\nexport default withRouter(Profile);\n","/**\n * @module Layout/navbar\n * @description Navbar functional component\n * @author Mitko Donchev\n */\nimport React, {\n  useState,\n  useEffect,\n  useRef,\n} from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\nimport Nav from 'react-bootstrap/Nav';\nimport Alert from 'react-bootstrap/Alert';\nimport fetch from 'node-fetch';\nimport base64 from 'base-64';\nimport { withRouter } from 'react-router';\n\n/**\n * The function will get the current user if one.\n *\n * @name Get user\n * @param {Object} props - the react props\n * @returns {Object} the current user info\n * @returns {Boolean} false - if no user\n */\nfunction getUser(props) {\n  let user;\n  if (props.location.state) {\n    user = props.location.state.user;\n  } else {\n    user = false;\n  }\n  return user;\n}\n\n/**\n * The function will get the mata for the headers.\n *\n * @name Get meta\n * @returns {Map} meta - a map of key values\n */\nfunction setMetaForHeaders() {\n  // get the username and password from env variables\n  const username = process.env.REACT_APP_USERNAME;\n  const password = process.env.REACT_APP_PASSWORD;\n\n  const meta = new Map();\n  // set the content type\n  meta.set('Content-Type', 'application/json');\n  // auth credentials to access the backend API\n  meta.set('Authorization', `Basic ${base64.encode(`${username}:${password}`)}`);\n  // set new header in order to add the credentials and type\n  return meta;\n}\n\n/**\n * The function will sign out the user\n *\n * @name Logout\n */\nasync function signOut() {\n  // get the mata and set the headers\n  const meta = setMetaForHeaders();\n  const headers = new Headers(meta);\n  try {\n    const settings = {\n      method: 'get', withCredentials: true, credentials: 'include', headers,\n    };\n    // using node fetch to post the data to the API endpoint\n    return await fetch('https://program-nissan-3000.codio-box.uk/api/user/logout', settings)\n      .then((response) => response.json().then((data) => ({\n        message: data.message,\n        status: response.status,\n      })).then((res) => res));\n  } catch (err) {\n    return false;\n  }\n}\n\n/**\n * Define the navbar functional component\n *\n * @name Navbar\n * @param {Object} props\n * @returns {DOMRect} the jsx code which represents the navbar\n */\nconst NavbarL = (props) => {\n  // initialize timeLeft\n  const [timeLeft, setTimeLeft] = useState(6);\n  // set the available buttons\n  let userButtons;\n  // get the user from the props state\n  const user = getUser(props);\n  // check for user (if logged in)\n  const [isLoggedIn, setUser] = useState(!!user);\n  // useRef to keep track of initialMount\n  const isInitialMount = useRef(true);\n  // store the alert\n  const [alert, setAlert] = useState();\n  // store the alert\n  let alertMessage;\n\n  // this function runs when the user click sign out\n  const handleSignOut = (e) => {\n    e.preventDefault();\n\n    // send the user object\n    async function singOutUser() {\n      try {\n        // send HTTP request\n        const result = await signOut();\n        if (result.status === 200) {\n          alertMessage = (\n                        <Alert variant=\"success\">\n                            <Alert.Heading>{result.message}</Alert.Heading>\n                        </Alert>\n          );\n          setAlert(alertMessage);\n          setUser(false);\n          // redirect to home page\n          // pass the logged user\n          props.history.push({\n            pathname: '/login',\n            state: { user: false },\n          });\n          return true;\n        }\n        alertMessage = (\n                        <Alert variant=\"danger\">\n                            <Alert.Heading>{result.message}</Alert.Heading>\n                        </Alert>\n        );\n        setAlert(alertMessage);\n        return false;\n      } catch (err) {\n        return false;\n      }\n    }\n\n    // call postData\n    singOutUser();\n  };\n\n  // useEffect will run only on updates except initial mount\n  useEffect(() => {\n    if (isInitialMount.current) {\n      isInitialMount.current = false;\n    } else {\n      setUser(user);\n    }\n\n    // exit early when we reach 0\n    if (!timeLeft) {\n      // remove alert\n      setAlert();\n      // reset the timer\n      setTimeLeft(6);\n    }\n\n    // using setInterval to run every second\n    const intervalId = setInterval(() => {\n      setTimeLeft(timeLeft - 1);\n    }, 1000);\n\n    // clear interval on re-render to avoid memory leaks\n    return () => clearInterval(intervalId);\n  }, [user, timeLeft]);\n\n  // go back to home\n  const goHome = () => {\n    try {\n      setAlert();\n      // redirect to homepage\n      props.history.push({\n        pathname: '/',\n        state: { user },\n      });\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n\n  // go back to about page\n  const goAbout = () => {\n    try {\n      setAlert();\n      // redirect to about\n      props.history.push({\n        pathname: '/about',\n        state: { user },\n      });\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n\n  // go back to about page\n  const goProfile = () => {\n    try {\n      setAlert();\n      // redirect to about\n      props.history.push({\n        pathname: '/profile',\n        state: { user },\n      });\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n\n  // login page\n  const loginPage = () => {\n    try {\n      setAlert();\n      // redirect to about\n      props.history.push({\n        pathname: '/login',\n      });\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n\n  // register page\n  const registerPage = () => {\n    try {\n      setAlert();\n      // redirect to about\n      props.history.push({\n        pathname: '/register',\n      });\n      return true;\n    } catch (err) {\n      return false;\n    }\n  };\n\n  if (isLoggedIn) {\n    userButtons = (\n            <Nav className=\"ml-auto\">\n                <Nav.Link onClick={() => goProfile()}>Profile</Nav.Link>\n                <Nav.Link onClick={handleSignOut}>Sign Out</Nav.Link>\n            </Nav>\n    );\n  } else {\n    userButtons = (\n            <Nav className=\"ml-auto\">\n                <Nav.Link onClick={() => registerPage()}>Sign Up</Nav.Link>\n                <Nav.Link onClick={() => loginPage()}>Sign In</Nav.Link>\n            </Nav>\n    );\n  }\n  const { children } = props;\n  return (\n        <div>\n            <Navbar bg=\"dark\" variant=\"dark\" expand=\"lg\">\n                <Navbar.Brand onClick={() => goHome()}>Real Estate Listing</Navbar.Brand>\n                <Navbar.Toggle aria-controls=\"basic-navbar-nav\" />\n                <Navbar.Collapse id=\"basic-navbar-nav\">\n                    <Nav className=\"mr-auto\">\n                        <Nav.Link onClick={() => goHome()}>Home</Nav.Link>\n                        <Nav.Link onClick={() => goAbout()}>About</Nav.Link>\n                    </Nav>\n                    {userButtons}\n                </Navbar.Collapse>\n            </Navbar>\n            {children}\n            {alert}\n        </div>\n  );\n};\n\nexport default withRouter(NavbarL);\n","/**\n * @module Layout/footer\n * @description Page footer functional component\n * @author Mitko Donchev\n */\nimport React from 'react';\nimport Navbar from 'react-bootstrap/Navbar';\n\n/**\n * Define the page footer functional component\n *\n * @name Page footer\n * @returns {DOMRect} the jsx code which represents the footer of all pages\n */\nconst Footer = () => (\n  <div>\n    <Navbar bg=\"dark\" fixed=\"bottom\" className=\"flex justify-content-center\">\n      <p id=\"white\">Created by Mitko Donchev. 😎</p>\n    </Navbar>\n  </div>\n);\n\nexport default Footer;\n","/**\n * @description Main app file\n * @author Mitko Donchev\n */\nimport React from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n} from 'react-router-dom';\n\n// import all pages at once\nimport {\n  Home, Login, About, Register, Property, NewProperty, EditProperty, Profile,\n} from './components';\n// import the layout component\nimport { NavbarL, Footer } from './layout';\n// import css style\nimport './App.css';\n\n// wrapping everything inside Layout component\n// define and export the app function\nexport default function App() {\n  return (\n    <Router>\n      <NavbarL />\n      <Switch>\n        <Route path=\"/property/delete\">\n          <Home />\n        </Route>\n        <Route path=\"/property/:id/edit\">\n          <EditProperty />\n        </Route>\n        <Route path=\"/property/new\">\n          <NewProperty />\n        </Route>\n        <Route path=\"/property/:id\">\n          <Property />\n        </Route>\n        <Route path=\"/profile\">\n          <Profile />\n        </Route>\n        <Route path=\"/register\">\n          <Register />\n        </Route>\n        <Route path=\"/about\">\n          <About />\n        </Route>\n        <Route path=\"/login\">\n          <Login />\n        </Route>\n        <Route path=\"/\">\n          <Home />\n        </Route>\n      </Switch>\n      <Footer />\n    </Router>\n  );\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({\n      getCLS, getFID, getFCP, getLCP, getTTFB,\n    }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","/**\n * @description Index file\n * @author Mitko Donchev\n */\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\n// Importing the Bootstrap CSS\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\nreportWebVitals(console.log);\n"],"sourceRoot":""}